<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>firm66的博客</title>
  <subtitle>hexo tranquilpeak</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://firm66.github.io/blog/"/>
  <updated>2016-11-15T01:00:47.753Z</updated>
  <id>https://firm66.github.io/blog/</id>
  
  <author>
    <name>firm66</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git简明教程2</title>
    <link href="https://firm66.github.io/blog/2016/11/12/git%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B2/"/>
    <id>https://firm66.github.io/blog/2016/11/12/git简明教程2/</id>
    <published>2016-11-12T06:21:05.000Z</published>
    <updated>2016-11-15T01:00:47.753Z</updated>
    
    <content type="html"><![CDATA[<p> Git是一款免费、开源的分布式版本控制系统，用于敏捷高效的处理任何或大或小的项目。<a id="more"></a>下面介绍几种分支的使用步骤，其实都大同小异。</p>
<!--toc-->
<h3 id="master分支-主分支"><a href="#master分支-主分支" class="headerlink" title="master分支(主分支)"></a>master分支(主分支)</h3><p>新仓库默认的分支就只有master。</p>
<h3 id="dev分支-开发分支-分支管理"><a href="#dev分支-开发分支-分支管理" class="headerlink" title="dev分支(开发分支)/分支管理"></a>dev分支(开发分支)/分支管理</h3><p>开发过程中我们每个人都可以创建属于自己的分支，个干个的活，别人看不到，提交到总分支上后每个人到可以看到，有利于整个项目的开发。下面是使用开发分支的具体步骤：<br><figure class="codeblock codeblock--tabbed"><figcaption><a href="http://www.dsfds.com" target="_blank" rel="external">example</a><ul class="tabs"><li class="tab active">json</li></ul></figcaption><div class="tabs-content"><figure class="highlight" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b &lt;name&gt;  创建并切换分支</span><br><span class="line">$ git branch   查看分支</span><br><span class="line">$ git add file， $ git commit -m "file"   提交文件到当前分支</span><br><span class="line">$ git checkout &lt;name&gt;  切换分支</span><br><span class="line">$ git merge &lt;name&gt; 合并某分支到当前分支(切换到master分支后，把其他分支的合并到master分支)</span><br><span class="line">$ git branch -d &lt;name&gt;  删除分支</span><br><span class="line">在远程库delete分支</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<p><strong>拓展:</strong><code>$ git branch &lt;name&gt;</code>创建分支 &nbsp;&nbsp;&nbsp;&nbsp; <code>$ git push origin &lt;name&gt;</code>推送到远程name分支上<br><code>$ git log --graph</code>可以看到分支合并图。<br><code>$ git merge --no-ff -m &quot;merge with no-ff&quot; &lt;name&gt;</code>合并某分支到当前分支，–no-ff参数表示用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并看不出曾经做过合并。<br><code>$ git push origin master</code>提示出错信息：error:failed to push som refs to ……的解决办法:<br><img src="images/image_1.png" alt="image_1.png"></p>
<h3 id="Bug分支-issue-101"><a href="#Bug分支-issue-101" class="headerlink" title="Bug分支(issue-101)"></a>Bug分支(issue-101)</h3><p>bug分支只用于在本地修复bug。当你手头有bug却急需提交任务时，可以先用<code>$ git stash</code>把当前工作现场“储藏”起来，新建一个issue-101的临时分支来修复，修复后合并分支，并将临时分支删除，下面是详细的步骤：<br><figure class="codeblock codeblock--tabbed"><figcaption><a href="http://www.dsfds.com" target="_blank" rel="external">example</a><ul class="tabs"><li class="tab active">json</li></ul></figcaption><div class="tabs-content"><figure class="highlight" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git stash </span><br><span class="line">$ git checkout master   切换分支到master(假定bug在master分支上)</span><br><span class="line">$ git checkout -b issue-101   创建并切换到issue-101分支</span><br><span class="line">修复bug,然后$ git add file，$ git commit -m "bug 101" </span><br><span class="line">$ git checkout master 修复完成后，切换到master分支</span><br><span class="line">$ git merge --no-ff -m "merged bug 101" issue-101  合并分支</span><br><span class="line">$ git branch -d issue-101  删除issue-101分支</span><br><span class="line">在远程库delete分支</span><br><span class="line">$ git status 查看修改，证明工作区是没bug的</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<p><strong>拓展:</strong><code>$ git stash list</code>查看工作现场  &nbsp;&nbsp;&nbsp;&nbsp; <code>$ git stash pop</code>回到工作现场<br>可以有多个srash,<code>$ git stash apply stash@{0}</code>回到指定的stash</p>
<h3 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h3><p>当想添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后合并，最后删除该feature分支，具体步骤同“dev分支(开发分支)”，(分支名改成feature)。<br><strong>拓展:</strong>feature分支合并前想删除，就要使用<code>$ git branch -D feature</code>进行强行删除。</p>
<h3 id="冲突处理"><a href="#冲突处理" class="headerlink" title="冲突处理"></a>冲突处理</h3><p>当两条分支对同一个文件的同一个文本块进行了不同的修改，并试图合并时，Git不能自动合并的，称之为冲突(conflict)。解决冲突需要人工处理。<br><code>$ git status</code>告诉我们产生冲突的文件，如图所示:<br>  <img src="images/image_2.png" alt="image_2.png"><br>找到冲突的文件，Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt; branch-name标记出了不同分支的内容:<br><img src="images/image_3.png" alt="image_32.png"><br>手动修改后，像往常的提交一样先add，commit，再push即可完成合并。</p>
<h3 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h3><figure class="codeblock codeblock--tabbed"><figcaption><a href="http://www.dsfds.com" target="_blank" rel="external">example</a><ul class="tabs"><li class="tab active">json</li></ul></figcaption><div class="tabs-content"><figure class="highlight" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">首先，可以试图用 $ git push origin &lt;name&gt;推送自己的修改；</span><br><span class="line">如果推送失败，则因为远程分支比你的本地更新，需要先用 $ git pull试图合并；</span><br><span class="line">如果合并有冲突，则解决冲突，并在本地提交；</span><br><span class="line">没有冲突或者解决掉冲突后，再用 $ git push origin &lt;name&gt;推送就能成功！</span><br></pre></td></tr></tbody></table></figure></div></figure>
<p><strong>拓展:</strong>如果<code>$ git pull</code>提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令<code>$ git branch --set-upstream branch-name origin/branch-name</code>建立本地分支和远程分支的关联。<br>查看远程库信息，使用<code>$ git remote -v</code>。</p>
<h3 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h3><figure class="codeblock codeblock--tabbed"><figcaption><a href="http://www.dsfds.com" target="_blank" rel="external">example</a><ul class="tabs"><li class="tab active">json</li></ul></figcaption><div class="tabs-content"><figure class="highlight" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master  切换到master分支上</span><br><span class="line">$ git tag v1.0  创建标签</span><br><span class="line">$ git tag  查看所有标签</span><br><span class="line">$ git show v1.0  查看标签信息</span><br><span class="line">$ git log --pretty=oneline --abbrev-commit   忘了打标签，先找到历史提交的commit id</span><br><span class="line">$ git tag v0.9 6224937   对commit id是6224937的创建标签</span><br><span class="line">$ git tag -a v1.1 -m "version 0.1 released" 3628164   创建带有说明的标签</span><br><span class="line"> // -s用私钥签名一个标签，签名采用PGP签名，须先安装pgp(GnuPG)</span><br><span class="line">$ git tag -s v0.2 -m "signed version 0.2 released" fec145a   用PGP签名标签</span><br><span class="line">$ git tag -d v1.0   删除标签</span><br><span class="line">$ git push origin v1.0   推送某个标签到远程</span><br><span class="line">$ git push origin --tags   推送所有标签到远程</span><br><span class="line">//标签已经推送到远程，想要删除，分两步：</span><br><span class="line">$ git tag -d v0.9     $ git push origin :refs/tags/v0.9</span><br></pre></td></tr></tbody></table></figure></div></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; Git是一款免费、开源的分布式版本控制系统，用于敏捷高效的处理任何或大或小的项目。
    
    </summary>
    
      <category term="WEB前端" scheme="https://firm66.github.io/blog/categories/WEB%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Git" scheme="https://firm66.github.io/blog/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>git简明教程</title>
    <link href="https://firm66.github.io/blog/2016/11/12/git%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/"/>
    <id>https://firm66.github.io/blog/2016/11/12/git简明教程/</id>
    <published>2016-11-12T05:16:38.000Z</published>
    <updated>2016-11-17T01:53:44.480Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;Git是一款免费、开源的分布式版本控制系统，用于敏捷高效的处理任何或大或小的项目。<a id="more"></a>把远程仓库(含有index.html)命名为username.github.io,就可以在<a href="https://username.github.io" target="_blank" rel="external">https://username.github.io</a> 上预览自己的主页！同理，远程仓库名是blog，预览时就是<a href="https://username.github.io/blog。" target="_blank" rel="external">https://username.github.io/blog。</a> 每个项目都可以预览，需要在当前项目的Settings里设置GitHub Pages&gt;Source为master branch&gt;Save,新手可以在GitHub Pages&gt;Launch automatic page generator&gt;里套用个人主页的模板。</p>
<!--toc-->
<hr>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a><a href="https://git-for-windows.github.io/" target="_blank" rel="external">安装Git</a></h3><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p><code>$ git config --global user.name &quot;Your Name&quot;</code> 你的github账号名<br><code>$ git config --global user.email &quot;email@example.com&quot;</code> 你的Email地址 </p>
<p><code>$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code> 创建SSH Key<br>然后在C盘用户目录下找到.ssh文件夹，里面有id_rsa和id_rsa.pub两个文件，登陆GitHub，打开“Settings”，“SSH Keys”页面,然后点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容,如下图所示：<br>   <img src="images/image_1.png" alt="image_1.png"></p>
<h3 id="git推送到远程库步骤"><a href="#git推送到远程库步骤" class="headerlink" title="git推送到远程库步骤"></a>git推送到远程库步骤</h3>  <figure class="codeblock codeblock--tabbed"><figcaption><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013743256916071d599b3aed534aaab22a0db6c4e07fd0000" target="_blank" rel="external">example</a><ul class="tabs"><li class="tab active">git</li></ul></figcaption><div class="tabs-content"><figure class="highlight plain" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 先在GitHub上新建远程仓库</span><br><span class="line">2. 法一、把远程库克隆到本地：$ git clone git@github.com:firm66/test.git</span><br><span class="line">   法二、把本地文件夹传到远程库：</span><br><span class="line">   $ git init  </span><br><span class="line">   $ git remote add origin git@github.com:firm66/test.git 关联远程库</span><br><span class="line">3. $ git add file (上传全部文件可以写成git add * 或者 git add .)</span><br><span class="line">4. $ git commit -m "file"  (引号里内容自定义)</span><br><span class="line">5. $ git push origin master 本地库内容推送到远程库</span><br></pre></td></tr></tbody></table></figure></div></figure>
<p>注：1.第一次推送时要用<code>$ git push -u origin master</code><br>   2.推送到dev分支上用<code>$ git push origin dev</code></p>
<h3 id="时光机穿梭"><a href="#时光机穿梭" class="headerlink" title="时光机穿梭"></a>时光机穿梭</h3><p><code>$ git status</code>查看修改的文件<br><code>$ git diff</code>查看具体的修改</p>
<p><code>$ git log</code>查看提交历史，以便回退<br><code>$ git reset --hard HEAD^</code>/<code>$ git reset --hard 3628164</code>版本回退</p>
<p><code>$ git reflog</code>查看命令历史，以便回到未来<br><code>$ git reset --hard 4354564</code>回到未来</p>
<p><code>$ git checkout -- file</code>提交前撤销修改<br><code>$ git reset HEAD file</code>，<code>$ git checkout -- file</code>添加到暂存区后，想放弃修改<br><code>$ git rm file</code>删除文件，<br><code>$ git checkout -- file</code> 删错了，恢复文件到最新版本<br> <strong>基本概念:</strong><br>工作区:就是你在电脑里能看到的目录,test文件夹就是一个工作区，比如我们环境中当前的目录。<br>版本库:工作区有一个隐藏目录.git 这个不算工作区，而是Git的版本库。<br>暂存区:英文叫stage,或index。一般存放在git目录下的index文件(.git/index)中，所以我们把暂存区时也叫作索引(index).<br>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。<br><img src="images/image_2.jpg" alt="image_2.jpg"><br>我们把文件往Git版本库里添加的时候，是分两步执行的：<br>第一步是用<code>$ git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；<br>第二步是用<code>$ git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p>
<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p> -<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/" target="_blank" rel="external">廖雪峰Git教程</a><br> -<a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages教程</a><br> -<a href="http://blog.csdn.net/chaihuasong/article/details/37911723" target="_blank" rel="external">常见错误解决</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Git是一款免费、开源的分布式版本控制系统，用于敏捷高效的处理任何或大或小的项目。
    
    </summary>
    
      <category term="WEB前端" scheme="https://firm66.github.io/blog/categories/WEB%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Git" scheme="https://firm66.github.io/blog/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>优秀网站推荐</title>
    <link href="https://firm66.github.io/blog/2016/11/06/%E4%BC%98%E7%A7%80%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/"/>
    <id>https://firm66.github.io/blog/2016/11/06/优秀网站推荐/</id>
    <published>2016-11-06T12:23:41.000Z</published>
    <updated>2016-11-07T10:46:47.465Z</updated>
    
    <content type="html"><![CDATA[<script src="/blog/crypto-js.js"></script><script src="/blog/mcommon.js"></script><span id="encrypt-message">欢迎来到我的博客，查看此文请输入密码.</span><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      关于前端的优秀网站，输入密码才能查看。
    
    </summary>
    
      <category term="资源干货" scheme="https://firm66.github.io/blog/categories/%E8%B5%84%E6%BA%90%E5%B9%B2%E8%B4%A7/"/>
    
    
      <category term="网站推荐" scheme="https://firm66.github.io/blog/tags/%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>用Grunt搭建自动化的web前端开发环境</title>
    <link href="https://firm66.github.io/blog/2016/11/06/grunt%E6%95%99%E7%A8%8B/"/>
    <id>https://firm66.github.io/blog/2016/11/06/grunt教程/</id>
    <published>2016-11-06T05:40:56.000Z</published>
    <updated>2016-11-07T09:08:27.476Z</updated>
    
    <content type="html"><![CDATA[<p> 没有最完美的教程，只有适合自己的方法，追求简单。<br> <a id="more"></a></p>
<ol>
<li>安装node.js，然后在控制台中安装全局的grunt-cli <code>npm install -g grunt-cli</code></li>
<li><p>新建一个文件夹grunt，里边新建下面的几个文件，<br><img src="images/image_1.png" alt="image_1.png"><br>在package.json中写下面的内容，不然的话grunt插件安装不上，</p>
<!--   ![image_2.png](images/image_2.png)-->
<figure class="codeblock codeblock--tabbed"><figcaption><a href="http://a.com" target="_blank" rel="external">example</a><ul class="tabs"><li class="tab active">json</li></ul></figcaption><div class="tabs-content"><figure class="highlight json" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"grunt_test"</span>,</span><br><span class="line"><span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line"><span class="attr">"devDependencies"</span>: {</span><br><span class="line">  </span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<p>然后右键，git bash，安装grunt <code>npm install grunt --save-dev</code>，会生成node_modules目录</p>
</li>
<li><p>详细配置package.json(需要自己配置)，在命令行输入<code>npm i</code>批量安装插件，这里注意一定要安装完全，(这样的好处是不用像<code>npm install grunt-contrib-jshint --save-dev</code>一个一个安装)，</p>
<!-- ![image_3.png](images/image_3.png)-->
<figure class="codeblock codeblock--tabbed"><figcaption><a href="http://a.com" target="_blank" rel="external">example</a><ul class="tabs"><li class="tab active">json</li></ul></figcaption><div class="tabs-content"><figure class="highlight json" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line"> <span class="attr">"name"</span>: <span class="string">"grunt_test"</span>,</span><br><span class="line"> <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line"> <span class="attr">"devDependencies"</span>: {</span><br><span class="line">   <span class="attr">"grunt"</span>: <span class="string">"^1.0.1"</span>,</span><br><span class="line">   <span class="attr">"grunt-contrib-clean"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">   <span class="attr">"grunt-contrib-concat"</span>: <span class="string">"^1.0.1"</span>,</span><br><span class="line">   <span class="attr">"grunt-contrib-csslint"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">   <span class="attr">"grunt-contrib-htmlmin"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">   <span class="attr">"grunt-contrib-cssmin"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">   <span class="attr">"grunt-contrib-imagemin"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">   <span class="attr">"grunt-contrib-jshint"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">   <span class="attr">"grunt-contrib-uglify"</span>: <span class="string">"^1.0.1"</span>,</span><br><span class="line">   <span class="attr">"grunt-contrib-watch"</span>: <span class="string">"^1.0.0"</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
</li>
<li><p>配置Gruntfile.js(看API配置)， (.csslint文件自己写)，可参考下面代码：</p>
<!--
![image_4.png](images/image_4.png)
 ![image_5.png](images/image_5.png)
-->
<figure class="codeblock codeblock--tabbed"><figcaption><a href="http://a.com" target="_blank" rel="external">example</a><ul class="tabs"><li class="tab active">js</li><li class="tab">csslint</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">grunt</span>) </span>{</span><br><span class="line">  grunt.initConfig({</span><br><span class="line">      pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),</span><br><span class="line">      concat: {</span><br><span class="line">          options: {</span><br><span class="line">              separator: <span class="string">';'</span></span><br><span class="line">          },</span><br><span class="line">          dist: {</span><br><span class="line">              src: [<span class="string">'src/js/*.js'</span>],</span><br><span class="line">              dest: <span class="string">'build/js/&lt;%= pkg.name %&gt;.js'</span></span><br><span class="line">          }</span><br><span class="line">      },</span><br><span class="line">      htmlmin: {</span><br><span class="line">          dist: {</span><br><span class="line">   options: {</span><br><span class="line">	removeComments: <span class="literal">true</span>,</span><br><span class="line">	collapseWhitespace: <span class="literal">true</span></span><br><span class="line">},</span><br><span class="line">  files: [{</span><br><span class="line">	expand: <span class="literal">true</span>,</span><br><span class="line">	cwd: <span class="string">'src/'</span>,</span><br><span class="line">	src: <span class="string">'**/*.html'</span>,</span><br><span class="line">	dest: <span class="string">'build/'</span></span><br><span class="line">}]</span><br><span class="line">       }</span><br><span class="line">     },</span><br><span class="line">       cssmin: { <span class="comment">//压缩css</span></span><br><span class="line">         options: {</span><br><span class="line">              stripBanners: <span class="literal">true</span>,</span><br><span class="line">              banner: <span class="string">'/*! &lt;%= pkg.name %&gt;-&lt;%= pkg.version %&gt;.css &lt;%=  grunt.template.today("dd-mm-yyyy") %&gt; */\n'</span></span><br><span class="line">          },</span><br><span class="line">          files: {</span><br><span class="line">              src: [<span class="string">'src/css/*.css'</span>],</span><br><span class="line">              dest: <span class="string">'build/css/&lt;%= pkg.name %&gt;.min.css'</span></span><br><span class="line">          }   </span><br><span class="line">     },</span><br><span class="line">      uglify: {  <span class="comment">//压缩js</span></span><br><span class="line">          options: {</span><br><span class="line">              stripBanners: <span class="literal">true</span>,</span><br><span class="line">              banner: <span class="string">'/*! &lt;%= pkg.name %&gt;-&lt;%= pkg.version %&gt;.js &lt;%=  grunt.template.today("dd-mm-yyyy") %&gt; */\n'</span></span><br><span class="line">          },</span><br><span class="line">          files: {</span><br><span class="line">              src: [<span class="string">'src/js/*.js'</span>],</span><br><span class="line">              dest: <span class="string">'build/js/&lt;%= pkg.name %&gt;.min.js'</span></span><br><span class="line">          }   </span><br><span class="line">      },</span><br><span class="line">      csslint: { <span class="comment">/*检查css语法*/</span></span><br><span class="line">          options: {</span><br><span class="line">              csslintrc:<span class="string">'.csslint'</span></span><br><span class="line">          },</span><br><span class="line">          files: [<span class="string">'src/css/*.css'</span>, <span class="string">'test/css/*.css'</span>]<span class="comment">/*上面files的快捷方式*/</span></span><br><span class="line">      },</span><br><span class="line">      jshint: {</span><br><span class="line">        options: {</span><br><span class="line">              globals: {</span><br><span class="line">                  jQuery: <span class="literal">true</span>,</span><br><span class="line">                  <span class="built_in">console</span>: <span class="literal">true</span>,</span><br><span class="line">                  <span class="built_in">module</span>: <span class="literal">true</span>,</span><br><span class="line">                 <span class="built_in">document</span>: <span class="literal">true</span></span><br><span class="line">              }</span><br><span class="line">          },</span><br><span class="line">          files: [<span class="string">'Gruntfile.js'</span>, <span class="string">'src/js/*.js'</span>, <span class="string">'test/js/*.js'</span>]</span><br><span class="line">      },</span><br><span class="line">      imagemin: {  </span><br><span class="line">       dist: {</span><br><span class="line">        options: {</span><br><span class="line">          optimizationLevel: <span class="number">5</span></span><br><span class="line">        },</span><br><span class="line">       files: [{</span><br><span class="line">          expand: <span class="literal">true</span>, </span><br><span class="line">          cwd: <span class="string">'src/images/'</span>,</span><br><span class="line">          src: [<span class="string">'**/*.{png,jpg,jpeg,gif,webp,svg}'</span>], </span><br><span class="line">          dest: <span class="string">'build/images/'</span></span><br><span class="line">         }] </span><br><span class="line">      }</span><br><span class="line">   },</span><br><span class="line">      watch: {</span><br><span class="line">         build: {</span><br><span class="line">          files: [<span class="string">'src/js/*.js'</span>,<span class="string">'src/css/*.css'</span>],</span><br><span class="line">          tasks: [<span class="string">'jshint'</span>,<span class="string">'csslint'</span>,<span class="string">'uglify'</span>],</span><br><span class="line">          options: {spawn: <span class="literal">false</span>}</span><br><span class="line">          }</span><br><span class="line">      }</span><br><span class="line">  });</span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-concat'</span>);</span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-htmlmin'</span>);</span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-cssmin'</span>);</span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-uglify'</span>);</span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-csslint'</span>);</span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-jshint'</span>);   </span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-imagemin'</span>);</span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-watch'</span>);</span><br><span class="line">  </span><br><span class="line">  grunt.registerTask(<span class="string">'test'</span>, [<span class="string">'jshint'</span>,<span class="string">'csslint'</span>,<span class="string">'watch'</span>]);</span><br><span class="line">  grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'concat'</span>,<span class="string">'htmlmin'</span>,<span class="string">'cssmin'</span>, <span class="string">'uglify'</span>,<span class="string">'csslint'</span>,<span class="string">'jshint'</span>]);</span><br><span class="line">  grunt.registerTask(<span class="string">'img'</span>, [<span class="string">'imagemin'</span>]); <span class="comment">//grunt imagemin命令</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain" style="display: none;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line"> "adjoining-classes":false,</span><br><span class="line"> "box-sizing":false,</span><br><span class="line"> "box-model" : false,</span><br><span class="line"> "compatible-vendor-prefixes": false,</span><br><span class="line"> "floats":false,</span><br><span class="line"> "font-sizes":false,</span><br><span class="line"> "gradients":false,</span><br><span class="line"> "important":false,</span><br><span class="line"> "known-properties":false,</span><br><span class="line"> "outline-none":false,</span><br><span class="line"> "qualified-headings":false,</span><br><span class="line"> "regex-selectors":false,</span><br><span class="line"> "shorthand":false,</span><br><span class="line"> "text-indent":false,</span><br><span class="line"> "unique-headings":false,</span><br><span class="line"> "universal-selector":false,</span><br><span class="line"> "unqualified-attributes":false</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure></div></figure>
</li>
<li><p>把项目文件放进src， <code>grunt</code>命令压缩html，css，js，查错，<code>grunt imagemin</code>压缩图片，压缩后的文件都在build文件夹中</p>
</li>
<li><p>修改链接和位置，就可以传到github上了(package.json和Gruntfile.js文件也要上传到github)</p>
<p>注意:-必须要看<a href="http://www.gruntjs.net/getting-started" target="_blank" rel="external">Grunt中文文档</a></p>
<p>-压缩代码前需要把如Angular.js,Bootstrap.min.js的文件单独分开</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 没有最完美的教程，只有适合自己的方法，追求简单。&lt;br&gt;
    
    </summary>
    
      <category term="WEB前端" scheme="https://firm66.github.io/blog/categories/WEB%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="WEB前端学习路线" scheme="https://firm66.github.io/blog/tags/WEB%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>标签云(ECharts)</title>
    <link href="https://firm66.github.io/blog/2016/08/29/%E5%AD%97%E7%AC%A6%E4%BA%91/"/>
    <id>https://firm66.github.io/blog/2016/08/29/字符云/</id>
    <published>2016-08-29T11:24:36.000Z</published>
    <updated>2016-11-06T05:33:00.525Z</updated>
    
    <content type="html"><![CDATA[<p>  学ECharts学了几天了,觉得用这个做一个博客的标签云蛮不错，能随机变幻。顺便对ECharts做一些总结，嘿嘿。<a id="more"></a><br>   <i class="fa fa-cog fa-spin fa-lg fa-fw"></i><a href="links/wordCloud.html">我的博客标签云</a><br>   <img src="images/01.png" alt="images_01.png"><br>   <i class="fa fa-futbol-o fa-spin fa-lg fa-fw"></i><a href="links/test02.html">1.饼图(ECharts3)</a><br>     <img src="images/02.png" alt="images_02.png"><br>     <!--链接要写成英文的--><br>   <i class="fa fa-empire fa-spin fa-lg fa-fw"></i><a href="links/bingtu.html">2.嵌套饼图(ECharts2)</a><br>     <img src="images/03.png" alt="images_03.png"><br>    <i class="fa fa-life-ring fa-spin fa-lg fa-fw"></i><a href="links/circletu.html">3.环形图(ECharts2)</a><br>     <img src="images/04.png" alt="images_03.png"><br>      <img src="images/05.png" alt="images_03.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  学ECharts学了几天了,觉得用这个做一个博客的标签云蛮不错，能随机变幻。顺便对ECharts做一些总结，嘿嘿。
    
    </summary>
    
      <category term="WEB前端" scheme="https://firm66.github.io/blog/categories/WEB%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="WEB前端学习路线" scheme="https://firm66.github.io/blog/tags/WEB%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>青春</title>
    <link href="https://firm66.github.io/blog/2016/08/22/%E9%9D%92%E6%98%A5/"/>
    <id>https://firm66.github.io/blog/2016/08/22/青春/</id>
    <published>2016-08-22T02:44:26.000Z</published>
    <updated>2016-08-30T08:54:13.359Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;青春不是年华，而是心境；青春不是桃面、丹唇、柔膝，而是深沉的意志，恢宏的想象，炙热的恋情；青春是生命的深泉在涌流。<a id="more"></a><br><img src="images/2016-08-22_105947.png" alt="images_01.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;青春不是年华，而是心境；青春不是桃面、丹唇、柔膝，而是深沉的意志，恢宏的想象，炙热的恋情；青春是生命的深泉在涌流。
    
    </summary>
    
      <category term="励志文库" scheme="https://firm66.github.io/blog/categories/%E5%8A%B1%E5%BF%97%E6%96%87%E5%BA%93/"/>
    
    
      <category term="Dream" scheme="https://firm66.github.io/blog/tags/Dream/"/>
    
  </entry>
  
  <entry>
    <title>好用的软件总结★</title>
    <link href="https://firm66.github.io/blog/2016/08/22/%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%80%BB%E7%BB%93/"/>
    <id>https://firm66.github.io/blog/2016/08/22/好用的软件总结/</id>
    <published>2016-08-22T01:30:58.000Z</published>
    <updated>2016-08-30T08:53:24.508Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;软件是一个很神奇的东西，虽然不懂原理，暂且收集起来用用，在这里给大家分享几款比较实用又很666666的工具。<a id="more"></a><br><!--toc--></p>
<h4 id="滚动截屏工具FSCapture"><a href="#滚动截屏工具FSCapture" class="headerlink" title="滚动截屏工具FSCapture;"></a>滚动截屏工具<a href="http://pan.baidu.com/s/1ntiFNML" target="_blank" rel="external">FSCapture</a>;</h4><p>  1.下载安装后，双击FSCapture.exe启动软件，到你希望截大图的页面!点击<code>捕获滚动窗口</code>开始截图!<br>  <img src="images/01.png" alt="images_1.png"><br>  2.截图开始，有两种模式，一种自动滚屏点击<code>鼠标左键</code>即可自动捕捉窗口全部页面。一种手动，按住<code>CTRL键</code>，点击右侧的滑块开始！  按<code>ESC键</code>停止滚动，然后它会直接跳转到截图完成的界面！</p>
<p>  3.截图完成，跳转到图片编辑页面，你可以裁剪、划线、添加箭头、虚化、荧光笔。。。。不需要的话直接点击保存即可！更详细的使用方法请自己琢磨，嘿嘿。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;软件是一个很神奇的东西，虽然不懂原理，暂且收集起来用用，在这里给大家分享几款比较实用又很666666的工具。
    
    </summary>
    
      <category term="技术板块" scheme="https://firm66.github.io/blog/categories/%E6%8A%80%E6%9C%AF%E6%9D%BF%E5%9D%97/"/>
    
    
      <category term="软件安装" scheme="https://firm66.github.io/blog/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>女生的梦想,蛮好的!</title>
    <link href="https://firm66.github.io/blog/2016/08/21/%E5%A5%B3%E7%94%9F%E7%9A%84%E6%A2%A6%E6%83%B3/"/>
    <id>https://firm66.github.io/blog/2016/08/21/女生的梦想/</id>
    <published>2016-08-21T12:20:40.000Z</published>
    <updated>2016-11-07T00:19:14.573Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;虽然我不是学霸，不懂CPA是什么，但是一直很喜欢这篇文章，这也是我向往的生活。现实中不能这么轻松快乐的生活，但是心灵却可以得到释放。<br><a id="more"></a><br><img src="images/01.png" alt="images_1.png"><br><div class="alert info no-icon"><p>女孩子，一定要好好读书，选个好就业的专业或你喜爱的专业，将来拥有一份体面的工作。</p>
</div>
<div class="alert success no-icon"><p>选择＞努力，但既然选择了，不管是对是错，就必须坚持，通向目的地的道路不止亿条。</p>
</div></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;虽然我不是学霸，不懂CPA是什么，但是一直很喜欢这篇文章，这也是我向往的生活。现实中不能这么轻松快乐的生活，但是心灵却可以得到释放。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://firm66.github.io/blog/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Dream" scheme="https://firm66.github.io/blog/tags/Dream/"/>
    
  </entry>
  
  <entry>
    <title>WEB前端学习路线</title>
    <link href="https://firm66.github.io/blog/2016/08/21/WEB%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <id>https://firm66.github.io/blog/2016/08/21/WEB前端学习路线/</id>
    <published>2016-08-21T01:29:41.000Z</published>
    <updated>2016-11-06T05:38:34.963Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;前端入门容易，学精不易，得学习很多知识，这里只写重要的。<a id="more"></a><br><img src="images/01.png" alt="images_01.png"><br>其他：</p>
<ol>
<li><span class="highlight-text green">相关框架：BootStrap、EasyUI </span>                          

2. <span class="highlight-text blue">版本控制：Git/SVN/Mercurial </span>    
</li>
<li><span class="highlight-text danger">图表：ECharts/Highcharts </span>    

4. <span class="highlight-text red">构建工具及包管理器:Grunt/Gulp </span>  
</li>
<li><span class="highlight-text primary">CSS预处理器：Sass/Less </span>  

6. <span class="highlight-text yellow">移动端：Zepto、JQueryMobile</span>
</li>
</ol>
<!--purple orange cyan success warning -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;前端入门容易，学精不易，得学习很多知识，这里只写重要的。
    
    </summary>
    
      <category term="WEB前端" scheme="https://firm66.github.io/blog/categories/WEB%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="WEB前端学习路线" scheme="https://firm66.github.io/blog/tags/WEB%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>phpstudy安装教程</title>
    <link href="https://firm66.github.io/blog/2016/08/12/phpstudy%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>https://firm66.github.io/blog/2016/08/12/phpstudy安装教程/</id>
    <published>2016-08-12T00:27:03.000Z</published>
    <updated>2016-08-30T08:31:34.980Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;phpStudy是一个PHP调试环境的程序集成包。我们学前台的用来搭建服务器很好用，不过node更好用一点。。<a id="more"></a>这里我们先学一下phpstudy安装。</p>
<hr>
<h5 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h5><p>大家可以百度一下phpstudy和SQLyog，然后点击下载即可!&emsp;大家也可以点此<a href="http://pan.baidu.com/s/1bpgHVPX" target="_blank" rel="external">直接下载</a>。</p>
<h5 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h5><p>首先点击phpstudy安装包，会弹出如下界面。<br><img src="images/01.png" alt="images_1"><br>点击选择下一步，进入安装路径选择界面。这里小编建议选择除了C盘以外的硬盘。在这里，小编选择的是F盘的安装路径，朋友们可以根据自己的需要选择安装路径。如下图所示：</p>
<p><img src="images/02.png" alt="images_2"><br>然后单击下一步，安装你要调试的程序安装路径，也就是网站源码放置位置，这个大家可以随意指定路径，但是文件名必须以WWW开头。</p>
<p><img src="images/03.png" alt="images_3"><br>然后，单机下一步即可！进入安装组件文件界面。一般情况下，大多数的php程序都会选择Apach&amp;PHP。没有经验的朋友最好选择默认安装的，如下所示：</p>
<p><img src="images/04.png" alt="images_4"><br>点击下一步，如图所示，不用管它，点下一步即可</p>
<p><img src="images/05.png" alt="images_1"><br>点击安装就可以了<br><img src="images/06.png" alt="images_1"></p>
<p>然后安装SQLyog，[SQLyog 是一个易于使用的、快速而简洁的图形化管理MYSQL数据库的工具，它能够在任何地点有效地管理你的数据库]。 点击打开程序，选择语言，选择下一步<br><img src="images/07.png" alt="images_1"></p>
<p>选择安装路径，这里不必和小编的一样，然后点击安装即可，如下图所示：</p>
<p><img src="images/08.png" alt="images_1"></p>
<p>安装完后启用phpstudy，Apache和MySQL都是绿色表明安装成功，如图所示:</p>
<p><img src="images/09.png" alt="images_1"></p>
<p>对于没有安装成功的，小编有以下几种解决办法，依情况做相应的修改。<strong>安装成功的可以跳过这一步</strong></p>
<p><img src="images/10.png" alt="images_1"><br><img src="images/11.png" alt="images_1"></p>
<h5 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h5><p>打开SQLyog，用户名和密码默认都是root,点击连接，如下图所示，<br>修改mysql密码请使用phpstudy,『其他选项菜单』-『MySQL设置』-『设置或修改密码』。 </p>
<p><img src="images/12.png" alt="images_1"><br>接下来把你要测试的文件 放在上面创建的WWW文件夹里,在浏览器里输入localhost:端口号/…<br>即可预览效果，这里小编的端口号设置成了8090，用此预览Ajax写的文件特别好用。</p>
<p><img src="images/13.png" alt="images_1"></p>
<h5 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h5><p>phpstudy的默认端口是<a href="http://localhost:80/" target="_blank" rel="external">http://localhost:80/</a>…</p>
<p>hexo博客的端口是<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>…</p>
<p>node服务器的端口是<a href="http://localhost:3000/" target="_blank" rel="external">http://localhost:3000/</a>…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;phpStudy是一个PHP调试环境的程序集成包。我们学前台的用来搭建服务器很好用，不过node更好用一点。。
    
    </summary>
    
      <category term="技术板块" scheme="https://firm66.github.io/blog/categories/%E6%8A%80%E6%9C%AF%E6%9D%BF%E5%9D%97/"/>
    
    
      <category term="软件安装" scheme="https://firm66.github.io/blog/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>魅族MX手机刷机教程（固件升级）</title>
    <link href="https://firm66.github.io/blog/2016/08/11/%E5%88%B7%E6%9C%BA/"/>
    <id>https://firm66.github.io/blog/2016/08/11/刷机/</id>
    <published>2016-08-11T02:17:47.000Z</published>
    <updated>2016-11-07T00:20:08.293Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;很多机友都不太清楚如何给魅族MX进行固件升级，也就是常说的刷机，那就让小编来教教你吧。<a id="more"></a></p>
<h3 id="法一、用电脑下载固件（系统）："><a href="#法一、用电脑下载固件（系统）：" class="headerlink" title="法一、用电脑下载固件（系统）："></a>法一、用电脑下载固件（系统）：</h3><p>1.在电脑上先下载想要刷机的那个系统（可以去魅族官网下载）。<br>2.通过USB连接线将电脑与魅族手机连接，并将update.bin文件拷贝至手机磁盘（SD卡）根目录下，<br>3.断开USB连接，关闭魅族MX的电源。<br>4.开机同时长按“电源键”及“音量+键”，进入刷机页面（如图），<br><img src="photos/1.png" alt="photos_1"><br>5.直至出现“系统更新SystemUpgrade”，<br>6.点击“系统更新System Upgrade”升级；这里要补充的一点是，如果你的手机已经Root了，就一定要清楚数据。以免刷机出现错误。即使是没root的都建议选择清楚数据，比较升级系统肯定会带来新的数据，建议把旧的数据清楚掉。至于App软件那些，可以升级后再去下载。<br>（“重新启动Restart”是退出升级）<br><img src="photos/2.png" alt="photos_1"><br><img src="photos/3.png" alt="photos_1"><br>7.升级完成后，点击设置，关于手机。到那里可以查看自己的手机系统是否更新成功。如下图所示：<br><img src="photos/6.png" alt="photos_1"><br>注：(1).升级过程当中不允许断电。<br>(2).手机升级系统之前一定要做好数据备份，以免数据丢失。<br>(3).也可以在第2步（将update.bin文件拷贝至手机磁盘根目录下）之后点击update.bin 固件，直接进入系统升级。<br><img src="photos/4.png" alt="photos_1"><br><img src="photos/5.png" alt="photos_1"></p>
<hr>
<h3 id="法二、用手机下载固件"><a href="#法二、用手机下载固件" class="headerlink" title="法二、用手机下载固件"></a>法二、用手机下载固件</h3><p>1.刷机包ROM的获取： 登陆“魅族”官网，在首页点击“服务支持”选项，<br><img src="photos/7.png" alt="photos_1"><br>2.接着在打开的“软件下载“列表中选择相应的ROM包进入下载页面。<br><img src="photos/8.png" alt="photos_1"><br><img src="photos/9.png" alt="photos_1"><br>3.MX3刷机过程：将下载到的“update.bin”文件拷贝到SD卡任意目录下。然后打开系统自带的“文档”应用，点击刚刚拷贝进去的ROM文件，就可以实现刷机操作啦。<br><img src="photos/4.png" alt="photos_1"><br><img src="photos/5.png" alt="photos_1"></p>
<h5 id="未找到固件的解决办法"><a href="#未找到固件的解决办法" class="headerlink" title="未找到固件的解决办法"></a>未找到固件的解决办法</h5><p>按住<code>开机键和音量+</code>进入恢复模式，然后插上USB数据线，看看电脑上是不是多了个Recovery磁盘？！如图所示：<br><img src="photos/10.png" alt="photos_1"><br>将官方固件update.bin复制到这个磁盘，磁盘至少有大约500M空间，如图所示<br><img src="photos/11.png" alt="photos_1"><br>复制完成后，点击屏幕上的“重试”按钮就可以了<br><img src="photos/12.png" alt="photos_1"><br>这是小编第一次玩刷机，有不正确的地方欢迎各位大神指点，哈哈</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;很多机友都不太清楚如何给魅族MX进行固件升级，也就是常说的刷机，那就让小编来教教你吧。
    
    </summary>
    
      <category term="技术板块" scheme="https://firm66.github.io/blog/categories/%E6%8A%80%E6%9C%AF%E6%9D%BF%E5%9D%97/"/>
    
    
      <category term="刷机" scheme="https://firm66.github.io/blog/tags/%E5%88%B7%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>SD卡受损怎么修复教程</title>
    <link href="https://firm66.github.io/blog/2016/08/11/SD%E5%8D%A1%E4%BF%AE%E5%A4%8D/"/>
    <id>https://firm66.github.io/blog/2016/08/11/SD卡修复/</id>
    <published>2016-08-11T00:02:11.000Z</published>
    <updated>2016-08-30T09:11:35.546Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;SD卡（Secure Digital Memory Card）中文翻译为安全数码卡，是一种基于半导体快闪记忆器的新一代记忆设备，它被广泛地于便携式装置上使用，例如数码相机、个人数码助理(PDA)和多媒体播放器等。<a id="more"></a>SD卡由日本松下、东芝及美国SanDisk公司于1999年8月共同开发研制。大小犹如一张邮票的SD记忆卡，重量只有2克，但却拥有高记忆容量、快速数据传输率、极大的移动灵活性以及很好的安全性。    </p>
<h5 id="那么SD卡受损了怎么办，其实我们可以使用windows下的chkdsk的dos命令来进行恢复，具体步骤如下："><a href="#那么SD卡受损了怎么办，其实我们可以使用windows下的chkdsk的dos命令来进行恢复，具体步骤如下：" class="headerlink" title="那么SD卡受损了怎么办，其实我们可以使用windows下的chkdsk的dos命令来进行恢复，具体步骤如下："></a>那么SD卡受损了怎么办，其实我们可以使用windows下的chkdsk的dos命令来进行恢复，具体步骤如下：</h5><h3 id="工具-原料"><a href="#工具-原料" class="headerlink" title="工具/原料"></a>工具/原料</h3><p>  <code>windows命令行</code></p>
<p>  <code>SD卡</code></p>
<p>  <code>读卡器</code></p>
<h3 id="方法-步骤"><a href="#方法-步骤" class="headerlink" title="方法/步骤"></a>方法/步骤</h3><p>1.<strong>首先需要说明的是：</strong>手机出现SD卡受损，千万不要再格式化内存卡了（如下图所示手机提示TF卡受损，需要格式化）：<br><img src="images/1.png" alt="images_1"><br>2.我们将TF卡插入读卡器，接到电脑USB后，电脑提示格式化，点击<code>【取消】</code>，然后查看一下<code>【属性】</code>，如下图所示：<br><img src="images/2.png" alt="images_1"><br>3.选择<code>【属性】</code>栏中的<code>【工具】</code>，点击<code>【开始检查】</code>，随后将提示<code>【无法访问该磁盘】</code>，如下图所示：<br><img src="images/3.png" alt="images_1"><br>4.此刻点击<code>【电脑菜单】</code>选择<code>【运行】</code>，也可以使用<code>windows键+R</code>快速打开，如下图所示:<br><img src="images/4.png" alt="images_1"><br>5.然后在运行中输入chkdsk H:/F，(H:就是你的SD卡盘符，/F是修复参数。)如下图所示：<br><img src="images/5.png" alt="images_1"><br>6.这时候会出现dos窗口，等待修复完成，DOS窗口会自动关闭。如下图所示：<br><img src="images/6.png" alt="images_1"><br>7.当SD卡修复完成后，查看一下TF卡的属性，显示正常了，如下图所示：<br><img src="images/7.png" alt="images_1"><br>8.接着把内存卡插回手机，这时SD卡将显示正常。如下图所示：<br><img src="images/8.png" alt="images_1"></p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>本经验为求助经验，为本文作者为解决网友所遇问题撰写，如果你喜欢本经验，请继续关注本系列文档，后期将会推出更多优秀的文章。</li>
<li>如果你觉得本篇经验对你有帮助，请关注下作者，谢谢!</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;SD卡（Secure Digital Memory Card）中文翻译为安全数码卡，是一种基于半导体快闪记忆器的新一代记忆设备，它被广泛地于便携式装置上使用，例如数码相机、个人数码助理(PDA)和多媒体播放器等。
    
    </summary>
    
      <category term="技术板块" scheme="https://firm66.github.io/blog/categories/%E6%8A%80%E6%9C%AF%E6%9D%BF%E5%9D%97/"/>
    
    
      <category term="SD卡修复" scheme="https://firm66.github.io/blog/tags/SD%E5%8D%A1%E4%BF%AE%E5%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>hexo+github搭建个人博客[置顶]</title>
    <link href="https://firm66.github.io/blog/2016/08/10/%E6%8A%80%E6%9C%AF%E6%9D%BF%E5%9D%97/"/>
    <id>https://firm66.github.io/blog/2016/08/10/技术板块/</id>
    <published>2016-08-10T01:47:13.000Z</published>
    <updated>2016-11-16T10:53:49.678Z</updated>
    
    <content type="html"><![CDATA[<p>  &emsp;&emsp;搭博客是我一直梦寐以求的，今天终于实现了。我的这个主题是tranquilpeak，  花了很长时间配置，终于弄好了，很开森。后来发现每种主题的配置是不一样的。<a id="more"></a><br><!--toc--></p>
<hr>
<h5 id="如何写博客"><a href="#如何写博客" class="headerlink" title="如何写博客"></a>如何写博客</h5><p>  <code>hexo new &quot;文件名&quot;，找到source/_posts路径下的 .md文件开始编写，要用Markdown语法，此外用到的images文件夹要放在 public/2016/08/10/技术板块 类似的目录下</code></p>
<p>  <code>hexo generate(或者 hexo g) 更新博客</code></p>
<p>  <code>hexo server(或者hexo s) 启动服务器</code></p>
<p>  <code>hexo deploy(或者hexo d) 上传到github</code></p>
<h5 id="如何更换主题"><a href="#如何更换主题" class="headerlink" title="如何更换主题"></a>如何更换主题</h5><p>  <code>下载主题到themes文件夹，然后改根目录下_config.yml中的theme和languages</code></p>
<p>  <code>进行主题的配置，每种主题配置方法稍有不同</code></p>
<p>  <code>运行 hexo g 和 hexo s 不断的调试</code></p>
<h5 id="如何删除多余的分类-categories"><a href="#如何删除多余的分类-categories" class="headerlink" title="如何删除多余的分类(categories)"></a>如何删除多余的分类(categories)</h5><p>  <code>法一、可以直接找到public/categories文件下，删除多余的文件夹即可，删除多余的标签也是同样的方法。</code></p>
<p>  <code>法二、首先删除根目录下的db.json文件然后 hexo clean ，注意hexo clean要谨慎使用，昨天一个hexo clean 所有图片都没了，建议你们提前做好备份，最后 hexo g。</code> </p>
<h5 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h5><ul>
<li><a href="https://jayzangwill.github.io/blog/index.html" target="_blank" rel="external">hexo搭建博客教程</a></li>
<li><a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak/blob/master/docs/user.md" target="_blank" rel="external">tranquilpeak主题配置</a>&nbsp;&nbsp;<a href="http://www.mjiayou.com/2014/08/18/hexo-theme-modify-based-light/" target="_blank" rel="external">tranquilpeak主题修改</a></li>
<li><a href="https://hexo.io/zh-cn/api/" target="_blank" rel="external">hexo官方文档</a></li>
<li><a href="http://www.tuicool.com/articles/IvmIFrn" target="_blank" rel="external">添加百度统计1</a>&nbsp;&nbsp;<a href="http://www.tuicool.com/articles/IvmIFrn" target="_blank" rel="external">添加百度统计2</a></li>
</ul>
<h5 id="如何优化主题"><a href="#如何优化主题" class="headerlink" title="如何优化主题!"></a>如何优化主题!</h5><ul>
<li><strong>初级：</strong>小编配置完主题后，添加了多说评论插件，并设置成了头像360度旋转；</li>
<li>安装了百度统计插件，发现不能在网站上显示，只好又安装了不蒜子；</li>
<li>回到顶部功能试了不行，先放弃</li>
<li><strong>高级：</strong><a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak/blob/master/docs/user.md" target="_blank" rel="external">设置代码块行号</a>，<a href="https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md" target="_blank" rel="external">hexo博客-加密</a></li>
<li><a href="http://blog.magicer.xyz/2016/04/add-sharesdk/" target="_blank" rel="external">添加ShareSDK分享功能</a>/多说分享</li>
</ul>
<hr>
<h5 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h5><p>   很多东西看不懂或者是很多英文，还好有百度，以后要好好学英语了。这虽然不是一个特别完美的博客，实用就好，记录我的学习和成长过程！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  &amp;emsp;&amp;emsp;搭博客是我一直梦寐以求的，今天终于实现了。我的这个主题是tranquilpeak，  花了很长时间配置，终于弄好了，很开森。后来发现每种主题的配置是不一样的。
    
    </summary>
    
      <category term="技术板块" scheme="https://firm66.github.io/blog/categories/%E6%8A%80%E6%9C%AF%E6%9D%BF%E5%9D%97/"/>
    
    
      <category term="hexo" scheme="https://firm66.github.io/blog/tags/hexo/"/>
    
  </entry>
  
</feed>
